
(define (make-semaphore n)
  (let ((cell (list false))
        (count 0))
    (define (semaphore m)
      (cond ((eq? m 'acquire)
              (if (< count n)
                  (set! count (+ count 1)))
              (if (= count n)
                  (acquire-cell)))
            ((eq? m 'release)
              (release-cell)
              (if (> count 0)
                  (set! count (- count 1))))))
    (define (acquire-cell cell)
      (if (test-and-set! cell)
          (acquire-cell)))
    (define (release-cell cell)
      (clear! cell))
    semaphore))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
        false)))