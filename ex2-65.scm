(define (entry tree)
  (car tree))

(define (left-branch tree)
  (cadr tree))

(define (right-branch tree)
  (caddr tree))

(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (entry set)) #t)
      	((< x (entry set)) (element-of-set? x (left-branch set)))
      	((> x (entry set)) (element-of-set? x (right-branch set)))))

(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
      				(cons (entry tree)
      							(tree->list-1 (right-branch tree))))))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

(define (union-set tree1 tree2)
  (define (make-union-set set1 set2)
    (cond ((and (null? set1) (null? set2)) '())
          ((null? set1) set2)
          ((null? set2) set1)
          ( else (let ((x1 ( car set1)) (x2 (car set2)))
                  (cond ((= x1 x2) (cons x1 (make-union-set (cdr set1) (cdr set2))))
                        ((< x1 x2) (cons x1 (make-union-set (cdr set1) set2)))
                        ((> x1 x2) (cons x2 (make-union-set set1 (cdr set2)))))))))
  (list->tree (make-union-set (tree->list-1 tree1) (tree->list-1 tree2))))


(define (intersection-set tree1 tree2)
  (define (make-intersection-set set1 set2)
    (if (or (null? set1) (null? set2)) 
        '()
        (let ((x1 ( car set1)) (x2 (car set2)))
                  (cond ((= x1 x2) (cons x1 (make-intersection-set (cdr set1) (cdr set2))))
                        ((< x1 x2) (make-intersection-set (cdr set1) set2))
                        ((> x1 x2) (make-intersection-set set1 (cdr set2)))))))
  (list->tree (make-intersection-set (tree->list-1 tree1) (tree->list-1 tree2))))
